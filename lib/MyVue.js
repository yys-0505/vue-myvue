(()=>{"use strict";function t(t,e,i){Object.defineProperty(t,i,{configurable:!0,get:function(){return t[e][i]},set:function(n){t[e][i]=n}})}class e{constructor(){this.sub=[]}addDepend(){e.target.addDep(this)}addSub(t){this.sub.push(t)}notify(){for(let t of this.sub)t.update()}}e.target=null;const i=[];function n(t){this.walk(t)}n.prototype={walk:function(t){Object.keys(t).forEach((e=>{"object"==typeof t[e]&&this.walk(t[e]),this.defineReactive(t,e,t[e])}))},defineReactive:function(t,i,n){const o=new e;Object.defineProperty(t,i,{get:()=>(e.target&&o.addDepend(),n),set(t){t!==n&&(n=t,o.notify())}})}};const o=["created","mounted"];function s(t,e){this.vm=e,this.el=document.querySelector(t),this.init()}function c(t,e,i){this.vm=t,this.cb=i,this.exp=e,this.value=this.get()}function r(t,e){const i=t.$options[e];i&&i.call(t)}s.prototype={init:function(){this.el?this.compileElement(this.el,this.vm):console.error("Dom元素不存在")},compileElement:function(t,e){Array.from(t.childNodes).forEach((t=>{let i=t.textContent;this.isElementNode(t)?this.compileNode(t):this.isTextNode(t)&&/\{\{(.*?)\}\}/g.test(i)&&this.compileText(t),t.childNodes&&t.childNodes.length&&this.compileElement(t,e)}))},compileNode:function(t){const e=t.attributes;Array.from(e).forEach((e=>{const i=e.name,n=e.value;if(this.isDirective(i)){var o=i.substring(2);this.isEventDirective(o)?this.compileEvent(t,this.vm,n,o):this.compileModel(t,this.vm,n),t.removeAttribute(i)}}))},compileText:function(t){let e=RegExp.$1.split("."),i=this.vm;e.forEach((t=>{i=i[t]})),this.updateText(t,i),this.vm.$watch(RegExp.$1,(e=>{this.updateText(t,e)}))},compileEvent:function(t,e,i,n){var o=n.split(":")[1],s=e.methods&&e.methods[i];o&&s&&t.addEventListener(o,s.bind(e),!1)},compileModel:function(t,e,i){let n=e[i];this.modelUpdater(t,n),e.$watch(i,(e=>{this.modelUpdater(t,e)})),t.addEventListener("input",(t=>{let o=t.target.value,s=i.split("."),c=e;n!==o&&s.forEach(((t,e)=>{if(e===s.length-1)return c[t]=o,void(n=o);c=c[t]}))}))},updateText:function(t,e){t.textContent=void 0===e?"":e},modelUpdater:function(t,e){t.value=void 0===e?"":e},isDirective:function(t){return 0===t.indexOf("v-")},isEventDirective:function(t){return 0===t.indexOf("on:")},isElementNode:function(t){return 1===t.nodeType},isTextNode:function(t){return 3===t.nodeType}},c.prototype={get:function(){e.target&&i.push(e.target),e.target=this;let t=this.vm;return this.exp.split(".").forEach((e=>{t=t[e]})),i.pop(),e.target=i[i.length-1],t},addDep:function(t){t.addSub(this)},update:function(){let t=this.vm;this.exp.split(".").forEach((e=>{t=t[e]})),this.cb.call(this.vm,t,this.value)}},window.MyVue=function(e){let i=this;i.$options=e,i.$watch=function(t,e){new c(i,t,e)},function(t){t._data=t.$options.data,t.methods=t.$options.methods,new n(t._data),o.forEach((e=>{t.$options[e]=t.$options[e]||function(){}}))}(i);for(let e in i._data)t(i,"_data",e);r(i,"created"),new s(i.$options.el,i),r(i,"mounted")}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,